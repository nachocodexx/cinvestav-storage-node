node-id = "sn-0"
node-id =${?NODE_ID}
pool-id = "sp-0"
pool-id = ${?POOL_ID}
load-balancer = {
  strategy= "active"
  exchange ="load_balancer",
  routing-key = "load_balancer.lb-0"
}
load-balancer.exchange = ${?LOAD_BALANCER_EXCHANGE}
load-balancer.strategy = ${?LOAD_BALANCER_STRATEGY}
load-balancer.routing-key = ${?LOAD_BALANCER_RK}
//load-balancer = "RB"
//load-balancer = ${?LOAD_BALANCER}
replication-strategy = "active"
replication-strategy = ${?REPLICATION_STRATEGY}
//Http
host = "0.0.0.0"
host = ${?NODE_HOST}
port = 4000
port = ${?NODE_PORT}
//
replication-factor = 2
replication-factor = ${?REPLICATION_FACTOR}
exchange-name = "default"
storage-path = "/home/nacho/Programming/Scala/storage-node/target/storage"
storage-path = ${?STORAGE_PATH}
storage-nodes = ["sn-0","sn-1","sn-2"]
//storage-nodes = ["sn-zzzz"]
storage-nodes = ${?STORAGE_NODES}
heartbeat-time = 500
heartbeat-time = ${?HEARTBEAT_TIME}
//
source-folders = [
  "/home/nacho/Programming/Scala/storage-node/target/sources"
]
source-folders = ${?SOURCE_FOLDERS}
//
rabbitmq {
  nodes = [
    {
      host: "148.247.201.222",
      port: 5672,
    },
    {
      host:"148.247.201.222",
      port: 5673
    }
  ]
  virtual-host = "/",
  connection-timeout = 3,
  ssl = false,
  username = "nachox",
  password = "$1$9IMYrTig$iUET1Vy6lDq2t7m1K4amL1",
  requeue-on-nack = false,
  requeue-on-reject = false,
  internal-queue-size = 500
}

//rabbitmq.host = ${?RABBITMQ_HOST}
//rabbitmq.port = ${?RABBITMQ_PORT}
rabbitmq.nodes = ${?RABBITMQ_NODES}
rabbitmq.virtual-host = ${?RABBITMQ_VIRTUAL_HOST}
rabbitmq.connection-timeout = ${?RABBITMQ_CONNECTION_TIMEOUT}
rabbitmq.ssl = ${?RABBITMQ_SSL}
rabbitmq.username = ${?RABBITMQ_USERNAME}
rabbitmq.password = ${?RABBITMQ_PASSWORD}
rabbitmq.requeue-on-nack = ${?RABBITMQ_REQUEUE_ON_NACK}
rabbitmq.requeue-on-reject = ${?RABBITMQ_REQUEUE_ON_REJECT}
rabbitmq.internal-queue-size = ${?RABBITMQ_INTERNAL_QUEUE_SIZE}
